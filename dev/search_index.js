var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TypeTreesIO","category":"page"},{"location":"#TypeTreesIO","page":"Home","title":"TypeTreesIO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TypeTreesIO.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TypeTreesIO]","category":"page"},{"location":"#TypeTreesIO.TypeTreeIO","page":"Home","title":"TypeTreesIO.TypeTreeIO","text":"TypeTreeIO() → io\n\nCreate an IO object to which you can print type objects or natural signatures. Afterwards, io.tree will contain a tree representation of the printed type.\n\nExamples\n\njulia> io = TypeTreeIO();\n\njulia> print(io, Tuple{Int,Float64});\n\njulia> io.tree.body.name\n\"Tuple\"\n\njulia> io.tree.body.children[1].name\n\"Int64\"\n\njulia> String(take!(io))\n\"Tuple{Int64, Float64}\"\n\nExtended help\n\nIn addition to printing a type directly to an io::TypeTreeIO, you can also assemble it manually if you follow a few precautions:\n\n- any `where` statement must be printed as `print(io, \" where \")` or\n  `print(io, \" where {\")`. The `where` string argument may not have any\n  additional characters. Note the bracketing spaces.\n\n\n\n\n\n","category":"type"},{"location":"#TypeTreesIO.width_by_depth-Tuple{TypeTreesIO.TypeTreeBundle}","page":"Home","title":"TypeTreesIO.width_by_depth","text":"width_by_depth(node) → wd, wtrunc\n\nCompute the number of characters wd[depth] needed to print at each depth within the tree. Also compute the number of additional characters wtrunc[depth] needed if one truncates the tree at depth.\n\n\n\n\n\n","category":"method"}]
}
